{"gen_do_gradient": {"parameters": ["op", " g_output"], "comments": "    \"\"\"     Generates gradient Do operator, given forward Do op and a list     of gradient blobs corresponding to forward op's outputs     Returns a gradient op and a list of blobs corresponding to input gradients "}, "= _prepare_gradient_do_op": {"parameters": ["        fwd_op=op", "        fwd_net=subnet", "        grad_ops=inner_grad_ops", "        inputs=new_op_inputs", "        outputs=new_op_outputs", "        blob_bindings=new_blob_bindings", "        saved_fwd_blobs=saved_local_blob_names", "        workspace_blob_name=workspace_blob_name"], "comments": ""}, "dedupe_g_output": {"parameters": ["op", " g_output"], "comments": "    # blob corresponding to different forward op output blobs, Do operator     # requires a bijection between inner and outer names, make sure we do     # deduplication "}, "gen_while_gradient": {"parameters": ["op", " g_output"], "comments": "    \"\"\"     Generates gradient While operator "}, "_prepare_gradient_while_ops": {"parameters": ["        fwd_op", " input_names", " output_names", " loop_grad_net", " workspace_blob", "        init_grad_map", " loop_grad_map"], "comments": ""}, "= caffe2_pb2.OperatorDef": {"parameters": [""], "comments": ""}, "_get_do_arguments": {"parameters": ["do_op"], "comments": ""}, "gen_if_gradient": {"parameters": ["op", " g_output"], "comments": "    \"\"\"     Generates gradient If operator, given forward If op and a list     of gradient blobs corresponding to forward op's outputs     Returns a gradient op and a list of blobs corresponding to input gradients "}, "= _prepare_gradient_if_op": {"parameters": ["        fwd_op=op", "        input_names=input_names", "        output_names=output_names", "        then_grad_net=then_grad_net", "        else_grad_net=else_grad_net"], "comments": ""}, "_gen_subnet_gradient": {"parameters": ["subnet", " init_grad"], "comments": ""}, "= caffe2_pb2.NetDef": {"parameters": [""], "comments": ""}, "_get_net_argument": {"parameters": ["op", " net_name"], "comments": ""}, "getNetArgument": {"parameters": ["op", " net_name"], "comments": "    \"\"\"A wrapper for external call\"\"\" "}, "_gen_subgradient_pass": {"parameters": ["subnet", " init_grad"], "comments": ""}, "_do_op_sanity_check_and_process": {"parameters": ["op"], "comments": ""}, "_prepare_blob_copy_op": {"parameters": ["from_name", " to_name"], "comments": ""}, "_prepare_gradient_do_op": {"parameters": ["        fwd_op", " fwd_net", " grad_ops", " inputs", " outputs", " blob_bindings", " saved_fwd_blobs", "        workspace_blob_name"], "comments": ""}, "_gen_grad_zero_init_ops": {"parameters": ["init_grad_map", " grad_map", " grad_output_names"], "comments": "        # so that grad_output has the same shape "}, "_prepare_gradient_if_op": {"parameters": ["        fwd_op", " input_names", " output_names", " then_grad_net", " else_grad_net"], "comments": ""}, "disambiguate_grad_if_op_output": {"parameters": ["grad_op", " idx", " new_grad_output"], "comments": ""}}